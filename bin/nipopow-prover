#!/usr/bin/env node

'use strict';

process.title = 'nipopow-prover';

const assert = require('assert');
const ProverNode = require('../lib/ProverNode');

const node = new ProverNode({
  config: true,
  argv: true,
  env: true,
  logFile: true,
  logConsole: false,
  logLevel: 'info',
  db: 'leveldb',
  memory: false,
  persistent: true,
  workers: true,
  listen: true,
  loader: require
});

process.on('unhandledRejection', (err, promise) => {
  throw err;
});

const fs = require('fs');
const {unnest, map, compose} = require('ramda');
const {extractInterlinkHashes} = require('../lib/interlink-extractor');

const hexify = x => x.toString('hex');
const interlinksFromTxs = compose(
  map(hexify),
  unnest,
  map(extractInterlinkHashes),
);

const RESET_HEIGHT = 1256700;

(async () => {
  await node.ensure();
  console.log('prefix =', node.config.prefix);
  console.log('network =', node.chain.network);
  await node.open();
  await node.connect();
  node.startSync();

  console.log('chain height', node.chain.height);

  if (node.chain.height > RESET_HEIGHT) {
    await node.chain.reset(RESET_HEIGHT);
    console.log('chain height reset to %d', RESET_HEIGHT);
  }

  node.on('block', async (blk) => {
    const {txs} = blk;
    const interlinks = interlinksFromTxs(txs);
    if (interlinks.length > 0) {
      console.log('block %s: %O', blk.rhash(), interlinks);
    }
  });
})().catch((err) => {
  console.error(err);
  process.exit(1);
});
